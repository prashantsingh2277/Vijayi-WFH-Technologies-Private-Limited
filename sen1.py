# -*- coding: utf-8 -*-
"""sen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0cYX113rhSKqiMEfEYfZL12eMf7pQQs
"""



import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Embedding, Flatten, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
import language_tool_python
import tensorflow as tf

# Clear the TensorFlow session
tf.keras.backend.clear_session()

# Load only necessary columns from CSV

df = pd.read_csv('Data for AI Assignment - Sheet1.csv', usecols=['Text', 'Classification'])

# Drop duplicates
df.drop_duplicates(inplace=True)

# Identify and display texts with profanities

profanity_list = ['fuck', 'Bastard', 'shit', 'sex']
texts_with_profanities = df[df['Text'].str.contains('|'.join(profanity_list), case=False)]
print("Texts with Profanities:")
print(texts_with_profanities[['Text', 'Classification']])

# Remove profanities
df = df[~df['Text'].str.contains('|'.join(profanity_list), case=False)]

# Convert Classification to numeric

class_mapping = {'sadness': 0.0, 'anger': 0.1, 'love': 0.2, 'surprise': 0.3, 'fear': 0.4,'joy':0.5}
df['Classification_code'] = df['Classification'].map(class_mapping)

# Check grammar errors

df


from language_tool_python import LanguageTool
tool = LanguageTool('en-US')

# Function to check for grammar errors
def has_grammar_errors(text):
    matches = tool.check(text)
    return len(matches) > 0

# Create a new column 'Grammar_errors' indicating whether each sentence has grammar errors
df['Grammar_errors'] = df['Text'].apply(has_grammar_errors)

# Display texts with grammar errors
print("\nTexts with Grammar Errors:")
texts_with_grammar_errors = df[df['Grammar_errors']]
print(texts_with_grammar_errors[['Text', 'Classification']])

# Create a new column 'Grammar_mark' to mark grammatically incorrect or incomplete sentences
df['Grammar_mark'] = df['Grammar_errors'].map({True: 'Incorrect', False: 'Correct'})

# Display the updated DataFrame
print("\nDataFrame after marking grammar errors:")
print(df)

max_fatures = 2000
tokenizer = Tokenizer(num_words=max_fatures, split=' ')
tokenizer.fit_on_texts(df['Text'].values)
X = tokenizer.texts_to_sequences(df['Text'].values)
X = pad_sequences(X)

from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
embed_dim = 128
lstm_out = 196

model = Sequential()
model.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(6,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])
print(model.summary())

Y = pd.get_dummies(df['Classification_code']).values
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)

batch_size = 32
model.fit(X_train, Y_train, epochs = 25, batch_size=batch_size, verbose = 1)
model.save('/content/sen.h5')
